" ___vital___
" NOTE: lines between '" ___vital___' is generated by :Vitalize.
" Do not mofidify the code nor insert new lines before '" ___vital___'
let s:___vital_function___ = 'function'
if !(v:version > 703 || v:version == 703 && has('patch1170'))
  let s:___vital_function___ = 's:___vital_function___'
  function! s:_SID() abort
    return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')
  endfunction
  let s:___vital_sfunc_prefix___ = '<SNR>' . s:_SID() . '_'
  delfunction s:_SID

  function! s:___vital_function___(fstr) abort
    return function(substitute(a:fstr, '^s:', s:___vital_sfunc_prefix___, ''))
  endfunction
endif

function! vital#_operator_highlighter#Coaster#Highlighter#import() abort
  return map({'get': '', 'set_prefix': '', 'make': '', '_vital_loaded': ''},  '{s:___vital_function___}("s:" . v:key)')
endfunction
" ___vital___
scriptencoding utf-8
let s:save_cpo = &cpo
set cpo&vim


function! s:_vital_loaded(V)
	let s:V = a:V
endfunction


let s:prefix = expand("<sfile>:p:h:h:t")
function! s:set_prefix(prefix)
	let s:prefix = a:prefix
endfunction


let s:base = {
\	"id_list" : []
\}

function! s:base.add(id)
	let self.id_list += [a:id]
	return a:id
endfunction

function! s:base.highlight(group, pattern, ...)
	let group = a:group
	let pattern = a:pattern
	let priority = get(a:, 1)
	return self.add(matchadd(group, pattern, priority))
endfunction


function! s:base.clear()
	silent! call map(self.id_list, "matchdelete(v:val)")
	let self.id_list = []
endfunction


function! s:make()
	let result = deepcopy(s:base)
	return result
endfunction


function! s:get()
	let name = s:prefix . "_highlighter"
	let w:{name} = get(w:, name, s:make())
	return w:{name}
endfunction


let &cpo = s:save_cpo
unlet s:save_cpo
